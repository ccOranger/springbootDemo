server:
   port: 8886
   servlet:
      session:
        timeout: 6000

hello:
  name: 你好


# swagger开关
swagger:
  enabled:  true
  info:
    basePackage: com.example.ldemo.controller
    title: 发布控制服务
    desc: 发布控制服务
    termsOfServiceUrl: http://127.0.0.1:${server.port}/
    version: 1.0
    contact:
        name: 发布控制服务
        url: http://127.0.0.1:${server.port}/swagger-ui.html
        email:


# JDBC 配置(驱动类自动从url的mysql识别,数据源类型自动识别)
spring:
    rabbitmq:
      host: 47.101.11.64
      port: 5672
      username: admin
      password: admin
      # 开启returnedMessage回调 Exchange -> Queue
      publisher-returns: true # 实现ReturnCallback接口，如果消息从交换器发送到对应队列失败时触发
      publisher-confirm-type: correlated
      listener:
        type: simple
        simple:
          # 设置手动确认(ack) Queue -> C
          acknowledge-mode: manual # 消息消费确认，可以手动确认
          prefetch: 1 # 消费者每次从队列获取的消息数量
          concurrency: 2 # 消费者数量
          max-concurrency: 10 # 启动消费者最大数量
          # 重试策略相关配置
          retry:
            enabled: true #开启消费者重试
            max-attempts: 3 #最大重试次数
            initial-interval: 2000 #重试间隔时间
      template:
        #在消息没有被路由到合适队列情况下会将消息返还给消息发布者
        #当mandatory标志位设置为true时，如果exchange根据自身类型和消息routingKey无法找到一个合适的queue存储消息，
        # 那么broker会调用basic.return方法将消息返还给生产者;当mandatory设置为false时，
        # 出现上述情况broker会直接将消息丢弃;通俗的讲，mandatory标志告诉broker代理服务器至少将消息route到一个队列中，
        # 否则就将消息return给发送者;
        #: true # 启用强制信息
        mandatory: true
    datasource:
        druid:
            url: jdbc:mysql://47.101.11.64:33306/db_insurance_platform?useUnicode=true&characterEncoding=UTF8&serverTimezone=GMT
            username: root
            password: root
            driver-class-name: com.mysql.jdbc.Driver
            initial-size: 1
            max-active: 20
            min-idle: 1
            max-wait: 60000
            pool-prepared-statements: false
            max-pool-prepared-statement-per-connection-size: 20
            validation-query: SELECT 'x'
            test-on-borrow: false
            test-on-return: false
            test-while-idle: true
            time-between-eviction-runs-millis: 60000
            min-evictable-idle-time-millis: 300000
            filters: stat
            web-stat-filter:
                enabled: true
                url-pattern: /*
                exclusions: "*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*"
                session-stat-enable: false
                session-stat-max-count: 1000
                principal-session-name: admin
                principal-cookie-name: admin
                profile-enable: true
            stat-view-servlet:
                enabled: true
                url-pattern: /druid/*
                reset-enable: true
                login-username: admin
                login-password: admin
                allow:
                deny:
            aop-patterns: com.example.ldemo.service.*
    # redis
    redis:
       cache:
          clusterNodes: 47.101.11.64:7001,47.101.11.64:7002,47.101.11.64:7003,47.101.11.64:7004,47.101.11.64:7005,47.101.11.64:7006
          commandTimeout: 5000
    data:
      elasticsearch:
        cluster-nodes: 47.101.11.64:9300
        cluster-name: docker-cluster


mybatis:
  mapper-locations: classpath*:/mapper/**/*Mapper.xml

# 打印日志
logging:
#控制台日志输出级别,这里设置的级别，控制xml文件中console控制台的输出，不设置默认info
  level:
     com.example.ldemo: trace
#配置日志输出
  config: classpath:log4j2-dev.xml

# 线程池配置
task:
    pool:
      corePoolSize: 20
      maxPoolSize: 40
      keepAliveSeconds: 300
      queueCapacity: 50


baidu:
  appId: 17377209
  apiKey: dtckzGYLtDPlbXm2Mq5AsXTs
  secretKey: ABGHTrpAopULO79GuLft4QKoOrbdUe3i